# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Control

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MessageType(object):
    NONE = 0
    SetupMessage = 1
    ControlMessage = 2
    TraceNow = 3
    ResponseHandled = 4


class Vec3(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 24

    # Vec3
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vec3
    def X(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # Vec3
    def Y(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # Vec3
    def Z(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))

def CreateVec3(builder, x, y, z):
    builder.Prep(8, 24)
    builder.PrependFloat64(z)
    builder.PrependFloat64(y)
    builder.PrependFloat64(x)
    return builder.Offset()


class CylindricalCoord(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 24

    # CylindricalCoord
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CylindricalCoord
    def R(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # CylindricalCoord
    def Phi(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # CylindricalCoord
    def Z(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))

def CreateCylindricalCoord(builder, r, phi, z):
    builder.Prep(8, 24)
    builder.PrependFloat64(z)
    builder.PrependFloat64(phi)
    builder.PrependFloat64(r)
    return builder.Offset()


class AngleSpan(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 32

    # AngleSpan
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AngleSpan
    def NPhi(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # AngleSpan
    def PhiSpan(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # AngleSpan
    def NTheta(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))
    # AngleSpan
    def ThetaSpan(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(24))

def CreateAngleSpan(builder, nPhi, phiSpan, nTheta, thetaSpan):
    builder.Prep(8, 32)
    builder.PrependFloat64(thetaSpan)
    builder.Pad(4)
    builder.PrependInt32(nTheta)
    builder.PrependFloat64(phiSpan)
    builder.Pad(4)
    builder.PrependInt32(nPhi)
    return builder.Offset()


class SphericalDir(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 16

    # SphericalDir
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SphericalDir
    def Phi(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # SphericalDir
    def Theta(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))

def CreateSphericalDir(builder, phi, theta):
    builder.Prep(8, 16)
    builder.PrependFloat64(theta)
    builder.PrependFloat64(phi)
    return builder.Offset()


class Sender(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Sender()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSender(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Sender
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Sender
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Sender
    def AngleSpan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            obj = AngleSpan()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Sender
    def LookAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            obj = SphericalDir()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SenderStart(builder):
    builder.StartObject(3)

def SenderAddPosition(builder, position):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def SenderAddAngleSpan(builder, angleSpan):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(angleSpan), 0)

def SenderAddLookAt(builder, lookAt):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lookAt), 0)

def SenderEnd(builder):
    return builder.EndObject()



class Reciever(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Reciever()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsReciever(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Reciever
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Reciever
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def RecieverStart(builder):
    builder.StartObject(1)

def RecieverAddPosition(builder, position):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def RecieverEnd(builder):
    return builder.EndObject()



class SoundSpeedAtDepth(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 16

    # SoundSpeedAtDepth
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SoundSpeedAtDepth
    def Depth(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # SoundSpeedAtDepth
    def Speed(self): return self._tab.Get(flatbuffers.number_types.Float64Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))

def CreateSoundSpeedAtDepth(builder, depth, speed):
    builder.Prep(8, 16)
    builder.PrependFloat64(speed)
    builder.PrependFloat64(depth)
    return builder.Offset()


class SetupMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SetupMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSetupMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SetupMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SetupMessage
    def SoundSpeedProfile(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 16
            obj = SoundSpeedAtDepth()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SetupMessage
    def SoundSpeedProfileLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SetupMessage
    def SoundSpeedProfileIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # SetupMessage
    def EigenRays(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SetupMessage
    def IntegrationSteps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SetupMessage
    def IntegrationStepSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SetupMessage
    def MaxBottomHits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SetupMessage
    def MaxSurfaceHits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SetupMessage
    def WaitForResponseHandled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

def SetupMessageStart(builder):
    builder.StartObject(7)

def SetupMessageAddSoundSpeedProfile(builder, soundSpeedProfile):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(soundSpeedProfile), 0)

def SetupMessageStartSoundSpeedProfileVector(builder, numElems):
    return builder.StartVector(16, numElems, 8)

def SetupMessageAddEigenRays(builder, eigenRays):
    builder.PrependBoolSlot(1, eigenRays, 0)

def SetupMessageAddIntegrationSteps(builder, integrationSteps):
    builder.PrependInt32Slot(2, integrationSteps, 0)

def SetupMessageAddIntegrationStepSize(builder, integrationStepSize):
    builder.PrependFloat64Slot(3, integrationStepSize, 0.0)

def SetupMessageAddMaxBottomHits(builder, maxBottomHits):
    builder.PrependInt32Slot(4, maxBottomHits, 0)

def SetupMessageAddMaxSurfaceHits(builder, maxSurfaceHits):
    builder.PrependInt32Slot(5, maxSurfaceHits, 0)

def SetupMessageAddWaitForResponseHandled(builder, waitForResponseHandled):
    builder.PrependBoolSlot(6, waitForResponseHandled, 1)

def SetupMessageEnd(builder):
    return builder.EndObject()



class ControlMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ControlMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsControlMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ControlMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ControlMessage
    def Sender(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Sender()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ControlMessage
    def Reciever(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Reciever()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ControlMessageStart(builder):
    builder.StartObject(2)

def ControlMessageAddSender(builder, sender):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sender), 0)

def ControlMessageAddReciever(builder, reciever):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(reciever), 0)

def ControlMessageEnd(builder):
    return builder.EndObject()



class TraceNow(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TraceNow()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTraceNow(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TraceNow
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

def TraceNowStart(builder):
    builder.StartObject(0)

def TraceNowEnd(builder):
    return builder.EndObject()



class ResponseHandled(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ResponseHandled()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsResponseHandled(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ResponseHandled
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

def ResponseHandledStart(builder):
    builder.StartObject(0)

def ResponseHandledEnd(builder):
    return builder.EndObject()



class Message(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Message()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Message
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Message
    def MessageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Message
    def Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def MessageStart(builder):
    builder.StartObject(2)

def MessageAddMessageType(builder, messageType):
    builder.PrependUint8Slot(0, messageType, 0)

def MessageAddMessage(builder, message):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(message), 0)

def MessageEnd(builder):
    return builder.EndObject()



