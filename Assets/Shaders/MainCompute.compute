// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float2 _PixelOffset;
float2 _Pixel;

int _MAXINTERACTIONS;

static const float PI = 3.14159265f;
static const float EPSILON = 1e-8;

//static const int MAXINTERACTIONS = 1;

int theta;
int ntheta;
int phi;
int nphi;
float3 srcDirection;

struct RayData // Data that will be sent back to the CPU
{
    float3 origin;
    int set;    
};

RWStructuredBuffer<RayData> _RayPoints;
AppendStructuredBuffer<RayData> _appRayPoints;

//-------------------------------------
//- MESHES

struct MeshObject
{
    float4x4 localToWorldMatrix;
    int indices_offset;
    int indices_count;
    int meshObjectType;
};

StructuredBuffer<MeshObject> _MeshObjects;
StructuredBuffer<float3> _Vertices;
StructuredBuffer<int> _Indices;

//-------------------------------------
//- RAY

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
    int nrOfInteractions;
};

Ray CreateRay(float3 origin, float3 direction, int nrOfInteractions)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    ray.nrOfInteractions = nrOfInteractions;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    int nrOfInteractions = 0;

    return CreateRay(origin, direction, nrOfInteractions);
}

Ray CreateThetaPhiRay(uint3 id) // absolut s채mstaste namnet n책gonsin
{   
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz; // source sphere's position

    float theta_rad = theta * PI / 180; //convert to radians
    float phi_rad = phi * PI / 180;

    float dtheta = theta_rad / ntheta; // resolution in theta
    float dphi = phi_rad / nphi; // resolution in phi

    // angles for srcSphere's forward vector (which is of length 1 meaning that r can be removed from all equations below)
    float origin_theta = acos(srcDirection.y);
    float origin_phi = atan2(srcDirection.z, srcDirection.x);    

    // calculate the angular offset for the ray compared to the forward vector of the source
    float offset_theta = origin_theta + theta_rad / 2 - id.x * dtheta;
    float offset_phi = origin_phi + phi_rad / 2 - id.y * dphi;

    float s0 = sin(origin_phi);
    float c0 = cos(origin_phi);

    float s1 = sin(offset_phi - origin_phi);
    float c1 = cos(offset_phi - origin_phi);

    float x = c0 * c1 * sin(offset_theta) - s0 * s1;
    float z = s0 * c1 * sin(offset_theta) + c0 * s1;
    float y = c1 * cos(offset_theta);

    float3 direction = float3(x, y, z);

    int nrOfInteractions = 0;

    return CreateRay(origin, direction, nrOfInteractions);
}

//-------------------------------------
//- RAYHIT

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    int type;
    bool sendNewRay;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.type = 10;
    hit.sendNewRay = false;
    return hit;
}

//-------------------------------------
//- INTERSECTION
#include "Intersection.cginc"

//-------------------------------------
//- TRACE

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    uint count, stride;

    float yDir = ray.direction.y;
    // Trace mesh objects
    _MeshObjects.GetDimensions(count, stride);
    for (uint i = 0; i < count; i++)
    {   // since each plane consists of two meshes facing opposite directions, it is only necessary to perform intersection tests for half of the meshes
        // a ray travelling down should only be tested against meshes facing up, a ray travelling up should only be tested against meshes facing down
        if (yDir < 0 && ((int)_MeshObjects[i].meshObjectType == 0 || (int)_MeshObjects[i].meshObjectType == 2 || (int)_MeshObjects[i].meshObjectType == 4))
        {
            IntersectMeshObject(ray, bestHit, _MeshObjects[i]);
        }
        else if (yDir > 0 && ((int)_MeshObjects[i].meshObjectType == 1 || (int)_MeshObjects[i].meshObjectType == 3 || (int)_MeshObjects[i].meshObjectType == 5))
        {
            IntersectMeshObject(ray, bestHit, _MeshObjects[i]);
        }        
    }

    return bestHit;
}

//-------------------------------------
//- HIT CODE (fr책gan 채r om man ska skapa vanliga funktioner eller om man ska skapa nya kernels)
#include "HitHandler.cginc"

void CheckHitType(inout Ray ray, inout RayHit hit, uint3 id, uint index1D) //evaluate if the ray hit anything and call the function corresponding to the hit-type
{    
    if (hit.type == 0 || hit.type == 1) { //surface
        Result[id.yx] = float4(1, 0, 0, 1);
        SurfaceHit(ray, hit, index1D);
        ray.nrOfInteractions++;
        hit.sendNewRay = SendNewRay(ray);
    }
    else if (hit.type == 2 || hit.type == 3) { //waterplane
        Result[id.yx] = float4(0, 1, 0, 1);
        WaterplaneHit(hit, index1D);
    }
    else if (hit.type == 4 || hit.type == 5) { //seafloor
        Result[id.yx] = float4(0, 0, 1, 1);
        SeafloorHit(ray, hit, index1D);
        ray.nrOfInteractions++;
        hit.sendNewRay = SendNewRay(ray);
    }
    else { //miss
        Result[id.yx] = float4(0, 0, 0, 1);
        NoHit(ray, index1D);
        hit.sendNewRay = false;
    }
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    // comvert id x and y values to a 1d index, each ray is allocated MAXINTERACTIONS slots for its interactions (surface/bottom hits, turning points)
    uint index1D = (id.y * width + id.x) * _MAXINTERACTIONS; 

    // Transform pixel to [-1,1] range
    //float2 uv = float2((id.xy) / float2(width, height) * 2.0f - 1.0f);

    // Get a ray for the UVs
    //Ray ray = CreateCameraRay(uv);

    Ray ray = CreateThetaPhiRay(id);

    RayHit hit = Trace(ray);
    CheckHitType(ray, hit, id, index1D);

    while (hit.sendNewRay) 
    {        
        hit = Trace(ray);
        CheckHitType(ray, hit, id, index1D);
    }
}
