// Each #kernel tells which function to compile; you can have many kernels
#include "UnityRayQuery.cginc"
#pragma require inlineraytracing
#pragma kernel CSMain

RaytracingAccelerationStructure g_AccelStruct;

RWTexture2D<float4> Result;

float4x4 _SourceCameraToWorld;
float4x4 _CameraInverseProjection;

float2 _PixelOffset;
float2 _Pixel;

int _MAXINTERACTIONS;

static const float PI = 3.14159265f;
static const float EPSILON = 1e-8;

int theta;
int ntheta;
int phi;
int nphi;
float3 srcDirection;

struct SSP_Data 
{
    float depth;
    float velocity;
    float derivative1;
    float derivative2;
};

StructuredBuffer<SSP_Data> _SSPBuffer;

struct RayData // Data that will be sent back to the CPU
{
    float3 origin;
    int set;    
};

RWStructuredBuffer<RayData> _RayPoints;

//-------------------------------------
//- RAY

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
    int nrOfInteractions;
};

#include "RayCreation.cginc"

//-------------------------------------
//- RAYHIT

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;    
    bool sendNewRay;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);    
    hit.sendNewRay = false;
    return hit;
}

//-------------------------------------
//- HIT CODE (frågan är om man ska skapa vanliga funktioner eller om man ska skapa nya kernels)
#include "HitHandler.cginc"

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    // comvert id x and y values to a 1d index, each ray is allocated MAXINTERACTIONS slots for its interactions (surface/bottom hits, turning points)
    uint index1D = (id.y * width + id.x) * _MAXINTERACTIONS; 

    Ray ray = CreateThetaPhiRay(id);

    RayDesc ray2; //description of the ray to be used in tracerayinline
    ray2.Origin = ray.origin;
    ray2.Direction = ray.direction;
    ray2.TMin = 0;
    ray2.TMax = 1e20f;

    RayHit hit = CreateRayHit();

    const uint rayFlags = RAY_FLAG_NONE;
    UnityRayQuery<rayFlags> rayQuery;

    rayQuery.TraceRayInline(g_AccelStruct, rayFlags, 0xff, ray2); // send a first ray
    rayQuery.Proceed();

    uint2 dest = id.xy;
    if(rayQuery.CommittedStatus() == COMMITTED_TRIANGLE_HIT) {
        hit.position = ray.origin + (ray.direction * rayQuery.CommittedRayT());
        hit.distance = rayQuery.CommittedRayT();        
        
        if (rayQuery.CommittedInstanceID() == 1) { // surface
            Result[dest] = float4(1, 0, 0, 0);
            SurfaceHit(ray, hit, index1D);
            hit.sendNewRay = SendNewRay(ray);
        }
        else if (rayQuery.CommittedInstanceID() == 2) { // waterplane
            Result[dest] = float4(0, 1, 0, 0);
            WaterplaneHit(hit, index1D);
        }
        else if (rayQuery.CommittedInstanceID() == 3) { // seafloor
            Result[dest] = float4(0, 0, 1, 0);
            SeafloorHit(ray, hit, index1D);
            hit.sendNewRay = SendNewRay(ray);
        }
        else if (rayQuery.CommittedInstanceID() == 4) { // target
            Result[dest] = float4(1, 0, 1, 0);
            TargetHit(ray, hit, index1D);
            hit.sendNewRay = false;
        }
    }
    else
    {
        Result[dest] = float4(0, 0, 0, 0);
        NoHit(ray, index1D);
        hit.sendNewRay = false;
    }    

    while (hit.sendNewRay) // spawn new ray from the hit position of the previous ray
    {   
        ray2.Origin = ray.origin;
        ray2.Direction = ray.direction;
        ray2.TMin = 0;
        ray2.TMax = 1e20f;

        rayQuery.TraceRayInline(g_AccelStruct, rayFlags, 0xff, ray2);
        rayQuery.Proceed();

        if (rayQuery.CommittedStatus() == COMMITTED_TRIANGLE_HIT) {
            hit.position = ray.origin + (ray.direction * rayQuery.CommittedRayT());
            hit.distance = rayQuery.CommittedRayT();

            if (rayQuery.CommittedInstanceID() == 1) { // surface
                Result[dest] = float4(1, 0, 0, 0);
                SurfaceHit(ray, hit, index1D);
                hit.sendNewRay = SendNewRay(ray);
            }
            else if (rayQuery.CommittedInstanceID() == 2) { // waterplane
                Result[dest] = float4(0, 1, 0, 0);
                WaterplaneHit(hit, index1D);
            }
            else if (rayQuery.CommittedInstanceID() == 3) { // seafloor
                Result[dest] = float4(0, 0, 1, 0);
                SeafloorHit(ray, hit, index1D);
                hit.sendNewRay = SendNewRay(ray);
            }
            else if (rayQuery.CommittedInstanceID() == 4) { // target
                Result[dest] = float4(1, 0, 1, 0);
                TargetHit(ray, hit, index1D);
                hit.sendNewRay = false;
            }
        }
        else
        {
            Result[dest] = float4(0, 0, 0, 0);
            NoHit(ray, index1D);
            hit.sendNewRay = false;
        }
    }
}
