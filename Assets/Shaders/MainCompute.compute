// Each #kernel tells which function to compile; you can have many kernels
//#include "UnityRayQuery.cginc"
//#pragma require inlineraytracing
#pragma kernel CSMain

//RaytracingAccelerationStructure g_AccelStruct;

RWTexture2D<float4> Result;

RWStructuredBuffer<float3> SSPData;
RWStructuredBuffer<float2> xrayBuf;


float depth;

float4x4 _SourceCameraToWorld;
float4x4 _CameraInverseProjection;

float2 _PixelOffset;
float2 _Pixel;

int _MAXINTERACTIONS;
int _BELLHOPSIZE;

static const float PI = 3.14159265f;
static const float EPSILON = 1e-8;

int theta;
int ntheta;
int phi;
int nphi;
float3 srcDirection;
float3 srcPosition;
float3 receiverPosition;

struct SSP_Data 
{
    float depth;
    float velocity;
    float derivative1;
    float derivative2;
};

StructuredBuffer<SSP_Data> _SSPBuffer;
#include "BSSP.cginc"

struct RayData // Data that will be sent back to the CPU
{
    float3 origin;
    int set;    
};

RWStructuredBuffer<RayData> _RayPoints;

//-------------------------------------
//- RAY

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
    int nrOfInteractions;
};

#include "BTrace.cginc"
#include "RayCreation.cginc"

//-------------------------------------
//- RAYHIT

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;    
    bool sendNewRay;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);    
    hit.sendNewRay = false;
    return hit;
}

//-------------------------------------
//- HIT CODE (frågan är om man ska skapa vanliga funktioner eller om man ska skapa nya kernels)
#include "HitHandler.cginc"

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    // comvert id x and y values to a 1d index, each ray is allocated MAXINTERACTIONS slots for its interactions (surface/bottom hits, turning points)
    uint index1D = (id.y * width + id.x) * _MAXINTERACTIONS; 

    Ray ray = CreateThetaPhiRay(id);

    SSP soundSpeedProfile;
    soundSpeedProfile.type = 0;

    float3 raydir = normalize(ray.direction);

    float alpha = asin(raydir.y);
    float _Phi = sign(raydir.z) * acos(raydir.x / sqrt(pow(raydir.x, 2.0) + pow(raydir.z, 2.0)));
    float2 xs = { 0.0,  mul(_SourceCameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).y };
    //double2 xs = { 0.0,  -srcPosition.y };
    float2 xr = { sqrt((pow(receiverPosition.x, 2.0) + pow(receiverPosition.z, 2.0))), receiverPosition.y };
    float deltas = 1.0;

    TraceOutput t = btrace(soundSpeedProfile, alpha, 0.1, xs, xr, depth, deltas, 5, 5, id, width, raydir, _Phi); //-depth för att depth fortfarande är definierad som positiv i C#-koden


}
