// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float2 _PixelOffset;
float2 _Pixel;

static const float PI = 3.14159265f;
static const float EPSILON = 1e-8;

static const int MAXINTERACTIONS = 1;

int theta;
int ntheta;
int phi;
int nphi;
float3 srcDirection;

struct RayData // Data that will be sent back to the CPU
{
    float3 origin;
    int set;    
};

RWStructuredBuffer<RayData> _RayPoints;
AppendStructuredBuffer<RayData> _appRayPoints;

//-------------------------------------
//- MESHES

struct MeshObject
{
    float4x4 localToWorldMatrix;
    int indices_offset;
    int indices_count;
    int meshObjectType;
};

StructuredBuffer<MeshObject> _MeshObjects;
StructuredBuffer<float3> _Vertices;
StructuredBuffer<int> _Indices;

//-------------------------------------
//- RAY

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
    int nrOfInteractions;
};

Ray CreateRay(float3 origin, float3 direction, int nrOfInteractions)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    ray.nrOfInteractions = nrOfInteractions;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    int nrOfInteractions = 0;

    return CreateRay(origin, direction, nrOfInteractions);
}

Ray CreateThetaPhiRay(uint3 id) // absolut sämstaste namnet någonsin
{   // based on https://en.wikipedia.org/wiki/Spherical_coordinate_system, however the y-axis and z-axis are flipped
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz; // source sphere's position

    float theta_rad = theta * PI / 180; //convert to radians
    float phi_rad = phi * PI / 180;

    float dtheta = theta_rad / ntheta; // resolution in theta
    float dphi = phi_rad / nphi; // resolution in phi

    // calculate the angular offset for the ray compared to the forward vector of the source
    float _theta = -theta_rad / 2 + id.x * dtheta;
    float _phi = -phi_rad / 2 + id.y * dphi;

    // calculate angles of the source's forward vector
    float origin_theta = acos(srcDirection.y);
    float origin_phi = sign(srcDirection.z) * acos(srcDirection.x / sqrt(pow(srcDirection.x,2) + pow(srcDirection.z,2)));
    
    // add the angular offset
    float theta_res = origin_theta + _theta;
    float phi_res = origin_phi + _phi;

    // calculate new direction (r is assumed to be one since srcDirection should be normalized)
    float3 direction = float3(
        sin(theta_res) * cos(phi_res),  //x
        cos(theta_res),                 //y
        sin(theta_res) * sin(phi_res)   //z
        );

    int nrOfInteractions = 0;

    return CreateRay(origin, direction, nrOfInteractions);
}

//-------------------------------------
//- RAYHIT

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    int type;
    bool sendNewRay;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.type = 10;
    hit.sendNewRay = false;
    return hit;
}

//-------------------------------------
//- INTERSECTION

bool IntersectTriangle_MT97(Ray ray, float3 vert0, float3 vert1, float3 vert2,
    inout float t, inout float u, inout float v)
{
    // find vectors for two edges sharing vert0
    float3 edge1 = vert1 - vert0;
    float3 edge2 = vert2 - vert0;

    // begin calculating determinant - also used to calculate U parameter
    float3 pvec = cross(ray.direction, edge2);

    // if determinant is near zero, ray lies in plane of triangle
    float det = dot(edge1, pvec);

    // use backface culling
    if (det < EPSILON)
        return false;
    float inv_det = 1.0f / det;

    // calculate distance from vert0 to ray origin
    float3 tvec = ray.origin - vert0;

    // calculate U parameter and test bounds
    u = dot(tvec, pvec) * inv_det;
    if (u < 0.0 || u > 1.0f)
        return false;

    // prepare to test V parameter
    float3 qvec = cross(tvec, edge1);

    // calculate V parameter and test bounds
    v = dot(ray.direction, qvec) * inv_det;
    if (v < 0.0 || u + v > 1.0f)
        return false;

    // calculate t, ray intersects triangle
    t = dot(edge2, qvec) * inv_det;

    return true;
}

void IntersectMeshObject(Ray ray, inout RayHit bestHit, MeshObject meshObject)
{
    uint offset = meshObject.indices_offset;
    uint count = offset + meshObject.indices_count;
    for (uint i = offset; i < count; i += 3)
    {
        float3 v0 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i]], 1))).xyz;
        float3 v1 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 1]], 1))).xyz;
        float3 v2 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 2]], 1))).xyz;

        float t, u, v;
        if (IntersectTriangle_MT97(ray, v0, v1, v2, t, u, v))
        {
            if (t > 0 && t < bestHit.distance)
            {
                bestHit.distance = t;
                bestHit.position = ray.origin + t * ray.direction;
                bestHit.normal = normalize(cross(v1 - v0, v2 - v0));    
                bestHit.type = meshObject.meshObjectType;
            }
        }
    }
}

//-------------------------------------
//- TRACE

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    uint count, stride;

    float yDir = ray.direction.y;
    // Trace mesh objects
    _MeshObjects.GetDimensions(count, stride);
    for (uint i = 0; i < count; i++)
    {   // since each plane consists of two meshes facing opposite directions, it is only necessary to perform intersection tests for half of the meshes
        // a ray travelling down should only be tested against meshes facing up, a ray travelling up should only be tested against meshes facing down
        if (yDir < 0 && ((int)_MeshObjects[i].meshObjectType == 0 || (int)_MeshObjects[i].meshObjectType == 2 || (int)_MeshObjects[i].meshObjectType == 4))
        {
            IntersectMeshObject(ray, bestHit, _MeshObjects[i]);
        }
        else if (yDir > 0 && ((int)_MeshObjects[i].meshObjectType == 1 || (int)_MeshObjects[i].meshObjectType == 3 || (int)_MeshObjects[i].meshObjectType == 5))
        {
            IntersectMeshObject(ray, bestHit, _MeshObjects[i]);
        }        
    }

    return bestHit;
}

//-------------------------------------
//- HIT CODE (frågan är om man ska skapa vanliga funktioner eller om man ska skapa nya kernels)

void SurfaceHit(inout Ray ray, RayHit hit, uint index1D)
{
    // save hit data to buffer
    _RayPoints[(index1D*MAXINTERACTIONS) + ray.nrOfInteractions].origin = hit.position;
    _RayPoints[(index1D * MAXINTERACTIONS) + ray.nrOfInteractions].set = 12345;

    // update the ray data
    ray.origin = hit.position + float3(0, -0.005f, 0); // move origin slightly so we don't accidentaly rehit the same plane
    float3 directionTemp = ray.direction;
    float3 newDirection = float3(directionTemp.x, directionTemp.y * -1, directionTemp.z);
    ray.direction = newDirection;
}

void SeafloorHit(inout Ray ray, RayHit hit, uint index1D)
{
    // save hit data to buffer
    _RayPoints[(index1D * MAXINTERACTIONS) + ray.nrOfInteractions].origin = hit.position;
    _RayPoints[(index1D * MAXINTERACTIONS) + ray.nrOfInteractions].set = 12345;

    // update the ray data
    ray.origin = hit.position + float3(0, 0.005f, 0); // move origin slightly so we don't accidentaly rehit the same plane
    float3 directionTemp = ray.direction;
    float3 newDirection = float3(directionTemp.x, directionTemp.y * -1, directionTemp.z);
    ray.direction = newDirection;
}

void WaterplaneHit(RayHit hit, uint index1D)
{
    // kod för när ett vattenplan träffats här... (förhoppningsvis bör vi kunna skriva en funktion som ser likadan ut oavsett vilket vattenplan som träffats. 
    // vissa variabelvärden ändras beroende på djup och sånt men ekvationerna bör se likadana ut.)

    // do nothing for now
}

void NoHit(Ray ray, uint index1D)
{
    // kod för miss ...

    _RayPoints[(index1D * MAXINTERACTIONS) + ray.nrOfInteractions].origin = float3(0, 1000, 0); // impossible hit since all hits should have y-coordinate <= 0
    _RayPoints[(index1D * MAXINTERACTIONS) + ray.nrOfInteractions].set = 400; // no hit found
    
}


bool SendNewRay(Ray ray)
{
    if (ray.nrOfInteractions < MAXINTERACTIONS)
    {
        return true;
    }
    return false;
}


void CheckHitType(inout Ray ray, inout RayHit hit, uint3 id, uint index1D) //evaluate if the ray hit anything and call the function corresponding to the hit-type
{
    if (hit.type == 0 || hit.type == 1) { //surface
        Result[id.xy] = float4(1, 0, 0, 1);
        SurfaceHit(ray, hit, index1D);
        ray.nrOfInteractions++;
        hit.sendNewRay = SendNewRay(ray);
    }
    else if (hit.type == 2 || hit.type == 3) { //waterplane
        Result[id.xy] = float4(0, 1, 0, 1);
        WaterplaneHit(hit, index1D);
    }
    else if (hit.type == 4 || hit.type == 5) { //seafloor
        Result[id.xy] = float4(0, 0, 1, 1);
        SeafloorHit(ray, hit, index1D);
        ray.nrOfInteractions++;
        hit.sendNewRay = SendNewRay(ray);
    }
    else { //miss
        Result[id.xy] = float4(0, 0, 0, 1);
        NoHit(ray, index1D);
        hit.sendNewRay = false;
    }
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    // comvert id x and y values to a 1d index, each ray is allocated MAXINTERACTIONS slots for its interactions (surface/bottom hits, turning points)
    uint index1D = (id.y * width + id.x) * MAXINTERACTIONS; 

    // Transform pixel to [-1,1] range
    //float2 uv = float2((id.xy) / float2(width, height) * 2.0f - 1.0f);

    // Get a ray for the UVs
    //Ray ray = CreateCameraRay(uv);

    Ray ray = CreateThetaPhiRay(id);

    RayHit hit = Trace(ray);
    CheckHitType(ray, hit, id, index1D);

    while (hit.sendNewRay) 
    {        
        hit = Trace(ray);
        CheckHitType(ray, hit, id, index1D);
    }
}
